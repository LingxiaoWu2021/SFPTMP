#include <ilcplex/ilocplex.h>  
#include <stdio.h>            
#include <stdlib.h>    
#include <sys/time.h>     
#include <stdlib.h>    
#include <time.h>           
#include <fstream>  
#include <string>
#include <math.h>
#include <sstream>
#include <algorithm>     
#include <vector>
#define random(x) (rand()%x)
namespace patch {template < typename T > std::string to_string( const T& n ){std::ostringstream stm; stm << n; return stm.str() ;}}

using namespace std;
//input data starts here

extern const int CNN = 1;
extern const int P = 3;
extern const int PT = 6;
extern const int T = 18;
extern const int I1 =1;
extern const int I2 = 8;
extern const int I = 9;
extern const int BN = 72;
extern const int LBN = 9;
extern const int SPN = 340;
extern const int SN = 10;
extern const int MBSN = 9;
double PRO[P][SN]={{0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1},{0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1},{0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1}}; 
int PTN[P]={6,6,6}; 
int PTset[P][PT]={{0,1,2,3,4,5},{6,7,8,9,10,11},{12,13,14,15,16,17}}; 
int sup[I][P][SN][PT]={{{{11589,0,0,0,0,0},{11615,0,0,0,0,0},{11589,0,0,0,0,0},{11623,0,0,0,0,0},{11604,0,0,0,0,0},{11495,0,0,0,0,0},{11495,0,0,0,0,0},{11561,0,0,0,0,0},{11710,0,0,0,0,0},{11608,0,0,0,0,0}},{{11524,0,0,0,0,0},{11786,0,0,0,0,0},{11659,0,0,0,0,0},{11622,0,0,0,0,0},{11506,0,0,0,0,0},{11518,0,0,0,0,0},{11617,0,0,0,0,0},{11380,0,0,0,0,0},{11594,0,0,0,0,0},{11473,0,0,0,0,0}},{{11663,0,0,0,0,0},{11354,0,0,0,0,0},{11759,0,0,0,0,0},{11577,0,0,0,0,0},{11407,0,0,0,0,0},{11519,0,0,0,0,0},{11529,0,0,0,0,0},{11512,0,0,0,0,0},{11619,0,0,0,0,0},{11535,0,0,0,0,0}}},{{{-217,-185,-201,-209,-205,-213},{-221,-215,-219,-187,-219,-217},{-215,-215,-191,-187,-217,-207},{-193,-221,-221,-201,-189,-203},{-185,-215,-189,-207,-185,-213},{-219,-201,-223,-215,-189,-193},{-201,-199,-207,-199,-191,-209},{-189,-189,-199,-201,-207,-207},{-207,-191,-211,-201,-215,-187},{-219,-207,-207,-209,-201,-207}},{{-187,-207,-197,-197,-219,-185},{-201,-195,-189,-215,-219,-219},{-205,-187,-203,-223,-189,-205},{-221,-217,-215,-221,-205,-201},{-189,-221,-187,-193,-219,-199},{-193,-211,-221,-191,-211,-191},{-217,-195,-217,-215,-199,-211},{-201,-215,-199,-189,-183,-201},{-199,-211,-199,-213,-209,-191},{-215,-187,-223,-215,-183,-221}},{{-215,-205,-191,-217,-197,-189},{-183,-207,-199,-191,-217,-205},{-201,-183,-185,-197,-219,-221},{-213,-189,-199,-199,-199,-219},{-207,-183,-187,-205,-215,-221},{-191,-199,-183,-187,-209,-199},{-213,-199,-197,-185,-193,-215},{-197,-199,-199,-187,-201,-219},{-219,-183,-199,-223,-203,-193},{-185,-221,-187,-207,-215,-221}}},{{{-171,-175,-158,-163,-147,-155},{-172,-145,-156,-155,-171,-150},{-159,-151,-153,-169,-153,-153},{-153,-155,-169,-177,-158,-156},{-174,-161,-155,-172,-166,-177},{-172,-174,-169,-175,-155,-169},{-172,-150,-147,-148,-171,-158},{-158,-147,-164,-159,-156,-151},{-175,-172,-150,-150,-172,-169},{-145,-150,-171,-145,-159,-163}},{{-161,-153,-163,-155,-155,-151},{-172,-172,-161,-164,-150,-174},{-174,-175,-172,-150,-156,-174},{-171,-161,-172,-169,-150,-161},{-147,-148,-161,-159,-171,-167},{-177,-145,-151,-166,-155,-169},{-175,-161,-159,-177,-148,-167},{-153,-169,-147,-159,-151,-163},{-156,-172,-151,-172,-153,-174},{-151,-174,-166,-164,-175,-151}},{{-148,-151,-166,-151,-172,-167},{-167,-148,-174,-169,-158,-174},{-169,-177,-163,-151,-177,-166},{-174,-151,-171,-177,-148,-150},{-158,-158,-161,-167,-177,-166},{-174,-177,-148,-161,-151,-156},{-147,-175,-148,-172,-177,-148},{-155,-155,-147,-166,-158,-175},{-175,-167,-172,-155,-147,-166},{-171,-174,-161,-153,-164,-147}}},{{{-229,-219,-249,-224,-222,-233},{-249,-215,-226,-236,-243,-254},{-210,-236,-252,-224,-215,-236},{-249,-231,-217,-243,-236,-254},{-240,-252,-226,-238,-240,-231},{-245,-249,-247,-226,-217,-226},{-249,-231,-233,-213,-208,-219},{-245,-217,-236,-252,-215,-215},{-243,-238,-238,-249,-243,-231},{-217,-231,-245,-245,-215,-254}},{{-217,-243,-252,-217,-240,-233},{-226,-213,-245,-254,-238,-224},{-254,-243,-215,-247,-215,-233},{-238,-243,-222,-236,-243,-217},{-247,-224,-254,-215,-224,-226},{-249,-229,-226,-247,-245,-254},{-252,-247,-247,-240,-226,-240},{-222,-226,-213,-219,-217,-224},{-208,-247,-252,-231,-240,-252},{-208,-210,-210,-254,-245,-224}},{{-254,-226,-245,-226,-247,-229},{-208,-222,-245,-247,-222,-245},{-247,-236,-219,-245,-226,-233},{-222,-217,-233,-247,-236,-222},{-238,-229,-219,-245,-215,-215},{-213,-252,-208,-208,-249,-249},{-249,-254,-208,-243,-226,-215},{-219,-213,-231,-245,-213,-215},{-231,-243,-245,-219,-243,-238},{-217,-231,-219,-249,-226,-245}}},{{{-224,-215,-197,-206,-202,-210},{-215,-230,-221,-215,-202,-239},{-224,-206,-215,-232,-202,-200},{-195,-215,-200,-239,-221,-232},{-226,-208,-237,-195,-221,-195},{-197,-228,-195,-230,-202,-208},{-239,-213,-206,-228,-234,-219},{-195,-230,-221,-228,-237,-219},{-234,-226,-197,-200,-224,-206},{-195,-213,-217,-210,-202,-224}},{{-204,-219,-237,-234,-208,-204},{-228,-226,-215,-221,-234,-226},{-232,-237,-213,-221,-195,-232},{-206,-217,-226,-226,-195,-228},{-195,-237,-217,-239,-210,-217},{-237,-204,-204,-206,-239,-217},{-210,-202,-221,-224,-224,-215},{-234,-228,-224,-217,-224,-234},{-204,-217,-230,-210,-234,-239},{-200,-202,-202,-226,-224,-230}},{{-200,-197,-234,-230,-224,-215},{-215,-230,-230,-234,-200,-224},{-237,-232,-224,-204,-237,-234},{-228,-200,-228,-202,-221,-200},{-232,-204,-219,-228,-237,-226},{-213,-197,-217,-210,-230,-217},{-226,-206,-206,-232,-230,-206},{-197,-208,-206,-210,-204,-202},{-239,-234,-213,-208,-197,-237},{-224,-228,-200,-208,-219,-200}}},{{{-269,-253,-287,-285,-258,-266},{-261,-261,-255,-261,-255,-282},{-285,-266,-266,-263,-271,-285},{-279,-255,-277,-287,-290,-277},{-255,-258,-290,-245,-290,-274},{-239,-269,-239,-245,-269,-279},{-269,-271,-266,-250,-293,-274},{-277,-242,-247,-277,-290,-274},{-290,-266,-282,-290,-250,-282},{-282,-245,-242,-253,-285,-287}},{{-285,-261,-250,-285,-285,-253},{-258,-290,-290,-250,-266,-258},{-266,-277,-245,-287,-277,-250},{-250,-255,-277,-269,-247,-247},{-277,-266,-266,-282,-287,-287},{-263,-274,-271,-263,-274,-266},{-261,-274,-263,-290,-242,-285},{-239,-282,-250,-247,-266,-274},{-293,-274,-255,-261,-258,-274},{-245,-274,-290,-287,-242,-239}},{{-293,-279,-279,-287,-247,-253},{-245,-239,-242,-253,-290,-245},{-285,-266,-258,-293,-287,-285},{-274,-282,-287,-245,-266,-263},{-253,-247,-242,-261,-239,-293},{-261,-269,-242,-277,-279,-293},{-274,-282,-271,-290,-253,-255},{-261,-266,-269,-293,-287,-250},{-287,-263,-277,-282,-239,-282},{-290,-245,-245,-245,-271,-293}}},{{{-252,-294,-286,-283,-305,-297},{-283,-291,-302,-272,-286,-291},{-280,-308,-291,-286,-294,-305},{-274,-263,-255,-308,-300,-252},{-300,-269,-263,-280,-291,-294},{-291,-277,-297,-302,-291,-255},{-263,-291,-291,-305,-266,-263},{-308,-263,-252,-252,-291,-300},{-300,-291,-305,-308,-269,-263},{-308,-274,-266,-272,-260,-297}},{{-294,-258,-280,-266,-274,-266},{-266,-286,-302,-308,-274,-302},{-283,-255,-305,-291,-266,-274},{-277,-283,-294,-308,-266,-297},{-266,-263,-297,-291,-283,-269},{-260,-274,-277,-255,-266,-269},{-286,-255,-263,-274,-291,-263},{-294,-269,-255,-291,-286,-272},{-308,-260,-302,-266,-255,-255},{-286,-288,-252,-300,-266,-280}},{{-308,-291,-305,-252,-277,-258},{-266,-258,-258,-266,-302,-252},{-302,-297,-283,-308,-269,-252},{-297,-288,-291,-272,-294,-274},{-294,-260,-297,-291,-263,-269},{-252,-258,-294,-300,-305,-297},{-297,-252,-291,-252,-255,-263},{-308,-283,-300,-294,-294,-260},{-288,-294,-302,-274,-258,-269},{-280,-280,-291,-286,-291,-258}}},{{{-302,-300,-300,-272,-269,-288},{-266,-255,-280,-266,-305,-302},{-288,-252,-260,-300,-277,-283},{-272,-294,-258,-300,-288,-297},{-286,-305,-300,-286,-286,-269},{-283,-274,-274,-255,-300,-263},{-272,-255,-305,-294,-288,-277},{-300,-305,-258,-302,-308,-263},{-263,-280,-308,-277,-280,-280},{-294,-277,-305,-266,-305,-305}},{{-266,-294,-305,-272,-300,-272},{-252,-308,-286,-305,-286,-274},{-305,-255,-288,-302,-258,-255},{-308,-286,-280,-291,-272,-297},{-274,-280,-266,-274,-263,-288},{-294,-286,-274,-258,-280,-288},{-269,-258,-255,-272,-294,-263},{-288,-272,-297,-300,-260,-280},{-274,-266,-300,-280,-252,-274},{-300,-263,-294,-283,-280,-266}},{{-286,-286,-297,-302,-274,-297},{-260,-286,-283,-291,-280,-255},{-263,-266,-291,-266,-300,-294},{-277,-294,-308,-305,-255,-305},{-283,-260,-266,-280,-297,-255},{-308,-266,-280,-269,-272,-302},{-294,-260,-305,-269,-297,-308},{-260,-283,-300,-255,-294,-263},{-263,-308,-291,-277,-308,-252},{-272,-305,-255,-266,-305,-263}}},{{{-305,-263,-308,-255,-305,-258},{-291,-294,-283,-255,-269,-277},{-274,-297,-274,-297,-263,-302},{-274,-294,-283,-255,-300,-263},{-305,-272,-252,-258,-274,-294},{-291,-258,-269,-291,-283,-277},{-274,-263,-283,-300,-283,-255},{-277,-291,-308,-302,-277,-260},{-288,-297,-263,-277,-272,-300},{-297,-308,-288,-258,-300,-283}},{{-283,-308,-255,-294,-297,-283},{-294,-277,-294,-308,-277,-294},{-272,-305,-300,-291,-302,-300},{-252,-305,-277,-277,-277,-269},{-280,-269,-272,-263,-294,-283},{-302,-266,-269,-274,-286,-291},{-297,-302,-291,-286,-308,-286},{-260,-272,-266,-297,-291,-260},{-260,-305,-263,-302,-305,-288},{-269,-280,-300,-263,-308,-258}},{{-297,-255,-277,-302,-288,-277},{-280,-269,-297,-274,-277,-272},{-305,-283,-294,-280,-286,-263},{-291,-283,-252,-269,-308,-252},{-272,-266,-300,-272,-283,-252},{-294,-294,-280,-288,-258,-283},{-260,-280,-286,-308,-297,-260},{-302,-297,-302,-274,-308,-288},{-305,-255,-286,-258,-252,-300},{-308,-283,-288,-269,-305,-269}}}}; 
int iniv[I]={2070,261,23,150,170,304,400,300,160}; 
int ubiv[I]={2740,522,414,300,341,608,800,600,320}; 
int len[I1][I2]={{3,6,2,2,3,3,2,1}}; 
double c1[I]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
double c2[I]={0.05,7.19,13.32,4.32,2.64,5.16,6.85,4.63,1.82}; 
double c3[BN]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
double c4[I1][I2]={{6.54,12.11,3.93,2.4,4.69,6.23,4.21,1.65}}; 
int RLBN[I1][I2]={{9,9,9,9,9,9,9,9}}; 
int LBset[I1][I2][LBN]={{{0,1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16,17},{18,19,20,21,22,23,24,25,26},{27,28,29,30,31,32,33,34,35},{36,37,38,39,40,41,42,43,44},{45,46,47,48,49,50,51,52,53},{54,55,56,57,58,59,60,61,62},{63,64,65,66,67,68,69,70,71}}}; 
double frt[BN]={5.23,5.23,5.23,4.58,4.58,4.58,3.92,3.92,3.92,9.69,9.69,9.69,8.48,8.48,8.48,7.27,7.27,7.27,3.14,3.14,3.14,2.75,2.75,2.75,2.36,2.36,2.36,1.92,1.92,1.92,1.68,1.68,1.68,1.44,1.44,1.44,3.75,3.75,3.75,3.28,3.28,3.28,2.81,2.81,2.81,4.98,4.98,4.98,4.36,4.36,4.36,3.74,3.74,3.74,3.37,3.37,3.37,2.95,2.95,2.95,2.53,2.53,2.53,1.32,1.32,1.32,1.16,1.16,1.16,0.99,0.99,0.99}; 
int lbcap[BN]={75,75,75,1,151,151,151,226,226,75,75,75,301,151,151,151,226,226,75,75,75,301,151,151,151,226,226,75,75,75,301,151,151,151,226,226,75,75,75,301,151,151,151,226,226,75,75,75,301,151,151,151,226,226,75,75,75,301,151,151,151,226,226,75,75,75,301,151,151,151,226,226}; 
int ubcap[BN]={150,150,150,225,225,225,300,300,300,150,150,150,225,225,225,300,300,300,150,150,150,225,225,225,300,300,300,150,150,150,225,225,225,300,300,300,150,150,150,225,225,225,300,300,300,150,150,150,225,225,225,300,300,300,150,150,150,225,225,225,300,300,300,150,150,150,225,225,225,300,300,300}; 
int SHN[BN]={7,4,3,7,4,3,7,4,3,6,3,2,6,3,2,6,3,2,8,4,3,8,4,3,7,4,3,8,4,3,7,4,3,8,4,3,7,4,3,8,4,3,7,4,3,7,4,3,7,4,3,7,4,3,8,4,3,8,4,3,8,4,3,9,4,3,8,4,3,8,5,3}; 
int SHset[BN][MBSN]={{0,1,2,3,4,5,6},{7,8,9,10},{11,12,13},{14,15,16,17,18,19,20},{21,22,23,24},{25,26,27},{28,29,30,31,32,33,34},{35,36,37,38},{39,40,41},{42,43,44,45,46,47},{48,49,50},{51,52},{53,54,55,56,57,58},{59,60,61},{62,63},{64,65,66,67,68,69},{70,71,72},{73,74},{75,76,77,78,79,80,81,82},{83,84,85,86},{87,88,89},{90,91,92,93,94,95,96,97},{98,99,100,101},{102,103,104},{105,106,107,108,109,110,111},{112,113,114,115},{116,117,118},{119,120,121,122,123,124,125,126},{127,128,129,130},{131,132,133},{134,135,136,137,138,139,140},{141,142,143,144},{145,146,147},{148,149,150,151,152,153,154,155},{156,157,158,159},{160,161,162},{163,164,165,166,167,168,169},{170,171,172,173},{174,175,176},{177,178,179,180,181,182,183,184},{185,186,187,188},{189,190,191},{192,193,194,195,196,197,198},{199,200,201,202},{203,204,205},{206,207,208,209,210,211,212},{213,214,215,216},{217,218,219},{220,221,222,223,224,225,226},{227,228,229,230},{231,232,233},{234,235,236,237,238,239,240},{241,242,243,244},{245,246,247},{248,249,250,251,252,253,254,255},{256,257,258,259},{260,261,262},{263,264,265,266,267,268,269,270},{271,272,273,274},{275,276,277},{278,279,280,281,282,283,284,285},{286,287,288,289},{290,291,292},{293,294,295,296,297,298,299,300,301},{302,303,304,305},{306,307,308},{309,310,311,312,313,314,315,316},{317,318,319,320},{321,322,323},{324,325,326,327,328,329,330,331},{332,333,334,335,336},{337,338,339}}; 
int SHsts[SPN]={2,4,6,8,10,12,14,1,5,9,13,0,6,12,1,3,5,7,9,11,13,1,5,9,13,0,6,12,1,3,5,7,9,11,13,0,4,8,12,2,8,14,0,2,4,6,8,10,1,5,9,0,6,0,2,4,6,8,10,1,5,9,0,6,0,2,4,6,8,10,2,6,10,2,8,0,2,4,6,8,10,12,14,2,6,10,14,2,8,14,1,3,5,7,9,11,13,15,1,5,9,13,1,7,13,2,4,6,8,10,12,14,2,6,10,14,1,7,13,1,3,5,7,9,11,13,15,1,5,9,13,2,8,14,2,4,6,8,10,12,14,2,6,10,14,1,7,13,1,3,5,7,9,11,13,15,0,4,8,12,1,7,13,2,4,6,8,10,12,14,2,6,10,14,0,6,12,0,2,4,6,8,10,12,14,0,4,8,12,1,7,13,1,3,5,7,9,11,13,0,4,8,12,1,7,13,2,4,6,8,10,12,14,2,6,10,14,1,7,13,2,4,6,8,10,12,14,2,6,10,14,1,7,13,2,4,6,8,10,12,14,2,6,10,14,0,6,12,1,3,5,7,9,11,13,15,1,5,9,13,0,6,12,1,3,5,7,9,11,13,15,0,4,8,12,1,7,13,0,2,4,6,8,10,12,14,1,5,9,13,1,7,13,0,2,4,6,8,10,12,14,16,1,5,9,13,1,7,13,1,3,5,7,9,11,13,15,1,5,9,13,2,8,14,1,3,5,7,9,11,13,15,0,4,8,12,16,2,8,14}; 
int SHets[SPN]={5,7,9,11,13,15,17,4,8,12,16,3,9,15,4,6,8,10,12,14,16,4,8,12,16,3,9,15,4,6,8,10,12,14,16,3,7,11,15,5,11,17,6,8,10,12,14,16,7,11,15,6,12,6,8,10,12,14,16,7,11,15,6,12,6,8,10,12,14,16,8,12,16,8,14,2,4,6,8,10,12,14,16,4,8,12,16,4,10,16,3,5,7,9,11,13,15,17,3,7,11,15,3,9,15,4,6,8,10,12,14,16,4,8,12,16,3,9,15,3,5,7,9,11,13,15,17,3,7,11,15,4,10,16,4,6,8,10,12,14,16,4,8,12,16,3,9,15,3,5,7,9,11,13,15,17,2,6,10,14,3,9,15,5,7,9,11,13,15,17,5,9,13,17,3,9,15,3,5,7,9,11,13,15,17,3,7,11,15,4,10,16,4,6,8,10,12,14,16,3,7,11,15,4,10,16,5,7,9,11,13,15,17,5,9,13,17,4,10,16,5,7,9,11,13,15,17,5,9,13,17,4,10,16,5,7,9,11,13,15,17,5,9,13,17,3,9,15,3,5,7,9,11,13,15,17,3,7,11,15,2,8,14,3,5,7,9,11,13,15,17,2,6,10,14,3,9,15,2,4,6,8,10,12,14,16,3,7,11,15,3,9,15,1,3,5,7,9,11,13,15,17,2,6,10,14,2,8,14,2,4,6,8,10,12,14,16,2,6,10,14,3,9,15,2,4,6,8,10,12,14,16,1,5,9,13,17,3,9,15}; 


//input data ends here

int TSN;
vector<double> trpr; 
int NDTN[P]; 
vector<vector<int>> NDSTN(P); 
vector<vector<vector<int>>> NDSset(P); 

int TPH[T];

int PNN[P];
vector<vector<int>> PNset(P);

extern const int ND1=I1*T; 
extern const int ND2=I2*T; 
extern const int ND=I*T;
int Nodeset[2][ND];
int NS1[ND1];
int NS2[ND2];
int NDindex[I][T]; 
double COST1[ND];
double COST2[ND];
vector<vector<double>> D;
double TQ[ND]; 
double IQ[ND];

int ARC=0;
vector<vector<int>> ANDset(2);
vector<double> COST3;

int PAN[P]; 
vector<vector<int>> PAset(P);
int PBAN[P][BN]; 
vector<vector<vector<int>>> PBAset(P);
int PINAN[P][ND];
vector<vector<vector<int>>> PINAset(P); 
int POUTAN[P][ND];
vector<vector<vector<int>>> POUTAset(P);

int INAN[ND]; 
vector<vector<int>> INAset(ND); 
int OUTAN[ND]; 
vector<vector<int>> OUTAset(ND); 
 
double mfb[BN];  
vector<vector<int>> ZIND;  
vector<int> ZSind;
vector<int> ZAind;
int TZN;  

vector<vector<int>> UIND;
vector<int>USind;
vector<int>UNind;
int TUN; 
int OVERMEM=0;
int NTRD=16; 

string num2str(double i)
{    stringstream ss;
ss<<i;
return ss.str();}

void Netsetup(){ 
	int counter1=0;
	int counter2=0;
	for (int i=0;i!=I1;++i){
		for (int t=0;t!=T;++t){
			Nodeset[0][counter1]=i;
			Nodeset[1][counter1]=t;
			COST1[counter1]=c1[i];
			COST2[counter1]=c2[i];
			TQ[counter1]=ubiv[i]; 
			IQ[counter1]=iniv[i]; 
			NS1[counter1]=counter1;
			NDindex[i][t]=counter1;
			counter1+=1;
		}
	}
	for (int i=0;i!=I2;++i){
		for (int t=0;t!=T;++t){
			Nodeset[0][counter1]=i;
			Nodeset[1][counter1]=t;
			COST1[counter1]=c1[i+I1];
			COST2[counter1]=c2[i+I1];
			TQ[counter1]=ubiv[i+I1];  
			IQ[counter1]=iniv[i+I1];
			NS2[counter2]=counter1;
			NDindex[i+I1][t]=counter1;
			counter1+=1;
			counter2+=1;
		}
	}
	for (int p=0;p!=P;++p){
		for (int n=0;n!=PTN[p];++n){
			int thetime=PTset[p][n];
			TPH[thetime]=p;
		}
	}
	for (int p=0;p!=P;++p){
		PAN[p]=0;
		PBAset[p].resize(BN);
		for (int b=0;b!=BN;++b){
			PBAN[p][b]=0;
		}
		PINAset[p].resize(ND);
		for (int n=0;n!=ND;++n){
			PINAN[p][n]=0;
		}
		POUTAset[p].resize(ND);
		for (int n=0;n!=ND;++n){
			POUTAN[p][n]=0;
		}
	}
	for (int n=0;n!=ND;++n){
		INAN[n]=0;
		OUTAN[n]=0;
	}
	counter1=0;
	for (int i1=0;i1!=I1;++i1){
		for (int i2=0;i2!=I2;++i2){
			for (int n=0;n!=RLBN[i1][i2];++n){
				int thebid=LBset[i1][i2][n];
				for (int m=0;m!=SHN[thebid];++m){
					int theship=SHset[thebid][m];
					int thestart=SHsts[theship];
					int theend=SHets[theship];
					int nd1=NDindex[i1][thestart];
					int nd2=NDindex[i2+I1][theend];
					int thep=TPH[thestart]; 
					PAN[thep]+=1; 
					PAset[thep].resize(PAN[thep],counter1); 
					PBAN[thep][thebid]+=1;  
					PBAset[thep][thebid].resize(PBAN[thep][thebid],counter1); 
					INAN[nd2]+=1; 
					INAset[nd2].resize(INAN[nd2],counter1);
					PINAN[thep][nd2]+=1;
					PINAset[thep][nd2].resize(PINAN[thep][nd2],counter1);   
					OUTAN[nd1]+=1; 
					OUTAset[nd1].resize(OUTAN[nd1],counter1);
					POUTAN[thep][nd1]+=1;
					POUTAset[thep][nd1].resize(POUTAN[thep][nd1],counter1);					  
					counter1+=1;
					ANDset[0].resize(counter1,nd1); 
					ANDset[1].resize(counter1,nd2); 
					COST3.resize(counter1,c3[thebid]); 
				}
			}
		}
	}
	for (int i1=0;i1!=I1;++i1){
		for (int t1=0;t1!=T;++t1){
			for (int i2=0;i2!=I2;++i2){
				if (t1+len[i1][i2]<T){
					int t2=t1+len[i1][i2];
					int nd1=NDindex[i1][t1];
					int nd2=NDindex[i2+I1][t2];
					int thep=TPH[t1]; 
					PAN[thep]+=1; 
					PAset[thep].resize(PAN[thep],counter1); 
					INAN[nd2]+=1; 
					INAset[nd2].resize(INAN[nd2],counter1);
					PINAN[thep][nd2]+=1;
					PINAset[thep][nd2].resize(PINAN[thep][nd2],counter1);
					OUTAN[nd1]+=1;  
					OUTAset[nd1].resize(OUTAN[nd1],counter1);
					POUTAN[thep][nd1]+=1;
					POUTAset[thep][nd1].resize(POUTAN[thep][nd1],counter1);
					counter1+=1;
					ANDset[0].resize(counter1,nd1);  
					ANDset[1].resize(counter1,nd2); 
					COST3.resize(counter1,c4[i1][i2]); 			
				}
			}
		}
	}
	ARC=counter1;
	for (int p=0;p!=P;++p){
		PNN[p]=0;
	}
	for (int p=0;p!=P;++p){
		for (int i=0;i!=I;++i){
			for (int pt=0;pt!=PTN[p];++pt){
				int thetime=PTset[p][pt];
				PNN[p]+=1;
				int thend=NDindex[i][thetime];
				PNset[p].resize(PNN[p],thend);
			}
		}
	}
}

void Treesetup(){
	TSN=0; 
	NDTN[0]=SN;  
	NDSTN[0].resize(NDTN[0],0); 
	NDSset[0].resize(NDTN[0]); 
	for (int p=1;p!=P;++p){
		NDTN[p]=NDTN[p-1]*SN;  
		NDSTN[p].resize(NDTN[p],0); 
		NDSset[p].resize(NDTN[p]); 
	}
	int search[P];  
	for (int p=0;p!=P-1;++p){
		search[p]=0;  
	}
	int counter=0;
	int doable=1;
	while (doable==1){
		for (int s=0;s!=SN;++s){   
			search[P-1]=s;
			double temppro=PRO[P-1][s];
			D.resize(counter+1);
			D[counter].resize(ND); 
			for (int p=0;p!=P-1;++p){  
				temppro=temppro*PRO[p][search[p]];
				for (int n=0;n!=PTN[p];++n){  
					int thetime=PTset[p][n];
					for (int i=0;i!=I;++i){
						int thend=NDindex[i][thetime]; 
						D[counter][thend]=sup[i][p][search[p]][n];
					}
				}
			}
			for (int n=0;n!=PTN[P-1];++n){  
				int thetime=PTset[P-1][n];
				for (int i=0;i!=I;++i){
					int thend=NDindex[i][thetime]; 
					D[counter][thend]=sup[i][P-1][s][n];
				}
			}
			trpr.resize(counter+1,temppro);
			int thenode=search[0];
			NDSTN[0][thenode]+=1; 
			NDSset[0][thenode].resize(NDSTN[0][thenode],counter); 
			for (int p=1;p!=P;++p){
				 thenode=thenode*SN+search[p];
				 NDSTN[p][thenode]+=1;
				 NDSset[p][thenode].resize(NDSTN[p][thenode],counter); 
			}
			counter+=1;  
		}
		doable=0;
		for (int p=P-2;p>=0;--p){
			if (search[p]<SN-1){
				search[p]+=1;
				doable=1;
				for (int pp=p+1;pp<P-1;++pp){
					search[pp]=0;
				}
				break;
			}
		}
	}
	TSN=counter;
}

void Cplexsetup () {
	for (int b=0;b!=BN;++b){
		mfb[b]=frt[b]*SHN[b];
	}
	ZIND.resize(TSN);
	int counter=0;
	for (int s=0;s!=TSN;++s){
		ZIND[s].resize(ARC);
		for (int a=0;a!=ARC;++a){
			ZIND[s][a]=counter;
			ZSind.resize(counter+1,s);
			ZAind.resize(counter+1,a);
			counter+=1;
		}
	}
	TZN=counter;
	counter=0;
	UIND.resize(TSN);
	for (int s=0;s!=TSN;++s){
		UIND[s].resize(ND);
		for (int n=0;n!=ND;++n){
			UIND[s][n]=counter;
			USind.resize(counter+1,s);
			UNind.resize(counter+1,n);
			counter+=1;
		}
	}
	TUN=counter;
}

void inputData () {
	Netsetup();
	Treesetup();
	if (OVERMEM==0){
		Cplexsetup ();
	}
}

void CPLEX () {
	ILOSTLBEGIN
	IloEnv env;
	IloCplex cplex(env);
	cplex.setParam(IloCplex::Param::TimeLimit,9000.0);
	cplex.setParam(IloCplex::Param::Emphasis::Numerical,1);
	cplex.setParam(IloCplex::Param::WorkMem,16384.0);
	cplex.setParam(IloCplex::Param::MIP::Limits::TreeMemory,16384.0);
	cplex.setParam(IloCplex::Threads, NTRD);
	IloNumVar obj(env, -IloInfinity, IloInfinity, ILOFLOAT);
	IloNumVarArray x(env, BN, 0, 1, ILOINT);
	IloNumVarArray y(env, BN, 0, IloInfinity, ILOFLOAT);
	IloNumVarArray z(env, TZN, 0, IloInfinity, ILOFLOAT);
	IloNumVarArray u(env, TUN, 0, IloInfinity, ILOFLOAT);
	IloNumVarArray v(env, TUN, 0, IloInfinity, ILOFLOAT);
	try{
		IloInt b,a,p,s,n;   
		IloModel model(env);
		{   
			model.add(IloMinimize(env, obj));
		} 
		{ 
			IloExpr Z1(env); 
			IloExpr Z2(env); 
			IloExpr Z3(env); 
			IloExpr Z4(env);
			for (b=0;b!=BN;++b){
				Z1+=mfb[b]*y[b];  
			}
			for (s=0;s!=TSN;++s){
				for (n=0;n!=ND;++n){
					int theind=UIND[s][n];
					Z2+=trpr[s]*COST1[n]*u[theind];
				}
			}
			for (s=0;s!=TSN;++s){
				for (n=0;n!=ND;++n){
					int theind=UIND[s][n];
					Z3+=trpr[s]*COST2[n]*v[theind];
				}
			}
			for (s=0;s!=TSN;++s){
				for (a=0;a!=ARC;++a){
						int theind=ZIND[s][a];
						int thearc=ZAind[theind];
						Z4+=trpr[s]*COST3[thearc]*z[theind];
				}
			}
			model.add(obj==Z1+Z2+Z3+Z4);
			Z1.end();
			Z2.end();
			Z3.end();
			Z4.end();
		}
		{
			for (b=0;b!=BN;++b){
				model.add(y[b]>=lbcap[b]*x[b]);
			}
		}
		{ 
			for (b=0;b!=BN;++b){
				model.add(y[b]<=ubcap[b]*x[b]);
			}
		}
		{
			for (s=0;s!=TSN;++s){
				for (p=0;p!=P;++p){
					for (b=0;b!=BN;++b){
						for (n=0;n!=PBAN[p][b];++n){
							int thearc=PBAset[p][b][n];
							int theind=ZIND[s][thearc];
							model.add(z[theind]<=y[b]);
						}
					}
				}
			}
		}
		{  
			for (s=0;s!=TSN;++s){
				for (int t1=1;t1!=T;++t1){
					int t2=t1-1;
					for (int i=0;i!=I1;++i){ 
						int nd1=NDindex[i][t1]; 
						int nd2=NDindex[i][t2];
						IloExpr sum1(env);
						for (n=0;n!=OUTAN[nd1];++n){
							int thearc=OUTAset[nd1][n];
							int theind=ZIND[s][thearc];
							sum1+=z[theind];
						}
						int ndind1=UIND[s][nd1];
						int ndind2=UIND[s][nd2];
						model.add(u[ndind1]==u[ndind2]+D[s][nd1]+v[ndind2]-v[ndind1]-sum1); 
						sum1.end();
					}
				}
			}
		}
		{  
			for (s=0;s!=TSN;++s){
				for (int i=0;i!=I1;++i){  
					int nd=NDindex[i][0]; 
					IloExpr sum1(env);
					for (n=0;n!=OUTAN[nd];++n){
						int thearc=OUTAset[nd][n];
						int theind=ZIND[s][thearc];
						sum1+=z[theind];
					}
					int ndind=UIND[s][nd];
					model.add(u[ndind]==IQ[nd]+D[s][nd]-v[ndind]-sum1); 
					sum1.end();
				}
			}
		}
		{  
			for (s=0;s!=TSN;++s){
				for (int t1=1;t1!=T;++t1){
					int t2=t1-1;
					for (int i=0;i!=I2;++i){   
						int nd1=NDindex[i+I1][t1];   
						int nd2=NDindex[i+I1][t2];
						IloExpr sum1(env);
						for (n=0;n!=INAN[nd1];++n){
							int thearc=INAset[nd1][n];
							int theind=ZIND[s][thearc];
							sum1+=z[theind];
						}
						int ndind1=UIND[s][nd1];
						int ndind2=UIND[s][nd2];
						model.add(u[ndind1]==u[ndind2]+D[s][nd1]-v[ndind2]+v[ndind1]+sum1); 
						sum1.end();
					}
				}
			}
		}
		{  
			for (s=0;s!=TSN;++s){
				for (int i=0;i!=I2;++i){  
					int nd=NDindex[i+I1][0];  
					IloExpr sum1(env);
					for (n=0;n!=INAN[nd];++n){
						int thearc=INAset[nd][n];
						int theind=ZIND[s][thearc];
						sum1+=z[theind];
					}
					int ndind=UIND[s][nd];
					model.add(u[ndind]==IQ[nd]+D[s][nd]+v[ndind]+sum1); 
					sum1.end();
				}
			}
		}
		{ 
			for (s=0;s!=TSN;++s){
				for (n=0;n!=ND;++n){
					int ndind=UIND[s][n];  
					model.add(u[ndind]<=TQ[n]);
				}
			}
		}
		{ 
			int counter=0;
			for (p=0;p!=P;++p){ 
				for (int aa=0;aa!=PAN[p];++aa){  
					int thearc=PAset[p][aa];  
					for (int sn=0;sn!=NDTN[p];++sn){ 
						for (int nn=0;nn<NDSTN[p][sn]-1;++nn){ 
							int thefs1=NDSset[p][sn][nn];
							int theind1=ZIND[thefs1][thearc];
							for (int mm=nn+1;mm<NDSTN[p][sn];++mm){
								int thefs2=NDSset[p][sn][mm];
								int theind2=ZIND[thefs2][thearc];
								model.add(z[theind1]==z[theind2]);
								counter+=1;
							}
						}
					}

				}
			}
		}
		{
			cplex.extract(model);	
			cplex.solve();
			cout<<"The model gap is"<<cplex.getMIPRelativeGap()*100<<endl;
			double thecost=cplex.getObjValue();
			cout<<"The result is"<<thecost<<endl;
			cout<<"Bid Selection Results:"<<endl;
			double bidcost=0;
			double IHcost=0;
			double TRcost=0;
			for (b=0;b!=BN;++b){
				double theres=cplex.getValue(x[b]);
				if (theres>0.99){
					double theamount=cplex.getValue(y[b]);
					cout<<"bid-"<<b<<"is used at"<<theamount<<endl;
					bidcost+=mfb[b]*theamount;
				}
			}
			cout<<"bidcost="<<bidcost<<endl;
		}
	}
	catch(IloException& ex){
		cerr << ex << endl;
	}
	catch(...){
		cerr << "Error..." << endl;
	}
	env.end();
}

int main (int argc, char **argv) {
	inputData();
	cout << "formulation" << endl;
	struct timeval t_start, t_end; 
	gettimeofday(&t_start,NULL);
	CPLEX ();
	gettimeofday(&t_end,NULL);
	cout << "time=" <<((t_end.tv_sec - t_start.tv_sec)*1000000+(t_end.tv_usec - t_start.tv_usec))/double(1000000)<<endl;
	cout << "FULL-CPLEX-succeeded" << endl;
	return 0;
}
